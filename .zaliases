alias dokcer='docker'
alias ll='ls -latr'
alias xs=cd
alias kls=ls
alias l=ls
alias d='date "+%Y%m%d"'
alias CD=cd
alias Cd=cd
alias lcd=cd
alias cd..='cd ..'
alias scd=cd
alias xs=cd
alias vf=cd
alias ls='ls -CF --si --color=tty'
alias tmpfoo='cat /dev/stdin > ~/foo'
alias tmpbar='cat /dev/stdin > ~/bar'
alias dmseg='dmesg'
alias grep='grep --color=auto'
alias xrander='xrandr'
alias pip3.6='python3.6 -m pip $1'
alias rmpyc='find ./ -type f -name "*.pyc" -exec rm -v {} \;'
alias docker-start='sudo service docker start ; sudo setenforce 0'
alias docker-stop='sudo service docker stop ; sudo setenforce 1'
alias gs='git status'
alias ds='docker ps'
alias display='gpicview'
alias eog='gpicview'
alias k='kubectl'
alias vim='nvim'
alias enable_monitor='xrander --output DP-3 --mode 2560x1440  --primary --above eDP-1'

proj() {
    cd "/home/$USER/go/src/github.com/voidshard/"$1
}

kcc() {
    if [ "$#" -ne 2 ]; then
      kubectl config get-contexts --no-headers | sort
    elif [[ $1 == "-" ]]; then
      kubectl config set-context --current --namespace=$2
    else
      CTX=`kubectl config get-contexts | grep eks | tr '*' ' ' | awk '{print $1}' | grep "/$1\$"`
      if [[ $CTX == "" ]]; then
        echo "Context '"$1"' not found. Try:"
        kcc
      else
        kubectl config use-context $CTX
        if [[ $2 != "-" ]]; then
          kubectl config set-context --current --namespace=$2
        fi
      fi
    fi
}

song () {
    # requires lux github.com/iawia002/lux and ffmpeg
    ~/.lux.py --audio-only --output-dir ~/Music $1
}

ddie () {
	# kill the most recently launched container
	docker stop `docker ps | head -n 2 | tail -n 1 | awk '{print $1}'`
}

dclean() {
    # delete stopped containers
    docker rm $(docker ps -a | grep Exited | awk '{print $1}');
    # delete dangling images
    docker rmi $(docker images -q -f dangling=true);
    docker volume prune; 
}

dinspect () {
	# inspect the last container
	docker inspect `docker ps -a | head -n 2 | tail -n 1 | awk '{print $1}'` | less
}

di () {
	docker images | grep -v REPOSITORY | grep -i $* | awk '{print $3}'
}

dc () {
	docker ps -a | grep -v "CONTAINER ID" | grep -i $* | awk '{print $1}'
}

dn () {
	docker network ls | grep -v "NETWORK" | grep -i $* | awk '{print $1}'
}

dcm(){
   if [[ $1 = "up" ]]; then
        # if it's a docker-compose 'up' command, auto add docker-compose 'down' variant
        docker-compose ${@:1} && echo "--stopping--" && docker-compose down
   elif [[ $1 = "run" ]]; then	
        # if it's a docker-compose 'run' command, auto add docker-compose 'down' variant
        docker-compose ${@:1} && echo "--stopping--" && docker-compose down
   else
        docker-compose ${@:1}
   fi
}
dmc(){
   if [[ $1 = "up" ]]; then
        # if it's a docker-compose 'up' command, auto add docker-compose 'down' variant
        docker-compose ${@:1} && echo "--stopping--" && docker-compose down
   elif [[ $1 = "run" ]]; then	
        # if it's a docker-compose 'run' command, auto add docker-compose 'down' variant
        docker-compose ${@:1} && echo "--stopping--" && docker-compose down
   else
        docker-compose ${@:1}
   fi
}

listify () {
    cat $1 | cut -d ',' -f 1  | awk '{print "\""$1"\","}' | tr '\n' ' ' | awk '{print "["$0"]"}'
}

tuplify () {
    cat $1 | grep . | awk '{print "(\""$1"\", \""$2"\")"}' | tr '\n' ',' | awk '{print "["$0"]"}'
}

